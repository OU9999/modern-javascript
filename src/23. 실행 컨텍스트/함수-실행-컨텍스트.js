var x = 1;
const y = 2;

function foo(a) {
  var x = 3;
  const y = 4;

  function bar(b) {
    const z = 5;
    console.log(a + b + x + y + z);
  }
  bar(10);
}

foo(20); // <= 현재 전역 코드를 실행중일때, foo 함수 호출 직전에 어떤 일이 생기나면..

/*
foo 함수가 호출되면 전역 코드의 실행을 일시 중단하고 foo 함수 내부로 코드의 제어권이 이동한다.
그리고 함수 코드를 평가하기 시작한다. 함수 코드 평가는 아래 순서로 진행된다.

1. foo 함수 실행 컨텍스트 생성
2. foo 함수 렉시컬 환경 생성 // 2.1 , 2.2 로 한 이유는 렉시컬 환경 안에서 밑의 환경들이 생성된다.
    2.1 함수 환경 레코드 생성
    2.2 this 바인딩
    2.3 외부 렉시컬 환경에 대한 참조 결정
3. foo 함수 코드 실행
4. bar 함수 실행전 위와 동일한 단계를 거침 ~
5. bar 함수 코드 실행
    5.1 console 식별자를 스코프 체인에서 검색함
    5.2 bar 함수 렉시컬 환경 => foo 함수 렉시컬 환경 => 전역 렉시컬 환경을 거쳐서 console 식별자 검색
    5.3 전역 렉시컬 환경은 객체 환경 레코드(window,global)와 선언적 환경 레코드(내가 선언)로 구성됨.
    console 식별자는 객체 환경 레코드의 BindingObject를 통해 전역 객체에서 찾을 수 있다.
    5.4 이제 console 식별자에 바인딩된 객체, 즉 console 객체에서 log 메서드 검색. 이때 console 객체의
    프로토타입 체인을 통해 메서드를 검색한다. 
    5.5 이제 표현식 a + b + x + y + z가 평가된다. 
    (a,x,y는 foo 렉시컬 환경에서 참조),(b,z는 bar 렉시컬 환경에서 참조)
    5.6 console.log 메서드가 호출된다.
6. bar 함수 코드 실행 종료
    - 이때 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 팝되어 제거되고,
    foo 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.
    - 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 제거되었다고 해서 bar 함수 렉시컬 환경까지 즉시 소멸하는것은 아니다.
    렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체다. 객체를 포함한 모든 값은 누군가에 의해 참조되지 않을 때
    비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸한다.
    - bar 함수 실행 컨텍스트가 소멸되었다 하더라도 만약 bar 함수 렉시컬 환경을 누군가 참조하고 있다면
    bar 함수 렉시컬 환경은 소멸하지 않는다.
7. foo 함수 코드 실행 종료
8. (foo 호출한뒤 코드가 더 없으니) 전역 코드 실행 종료 
*/
